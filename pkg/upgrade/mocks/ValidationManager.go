/*
Copyright 2022 NVIDIA

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// ValidationManager is an autogenerated mock type for the ValidationManager type
type ValidationManager struct {
	mock.Mock
}

// Validate provides a mock function with given fields: ctx, node
func (_m *ValidationManager) Validate(ctx context.Context, node *v1.Node) (bool, error) {
	ret := _m.Called(ctx, node)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Node) bool); ok {
		r0 = rf(ctx, node)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.Node) error); ok {
		r1 = rf(ctx, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewValidationManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidationManager creates a new instance of ValidationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidationManager(t mockConstructorTestingTNewValidationManager) *ValidationManager {
	mock := &ValidationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
