/*
Copyright 2022 NVIDIA CORPORATION & AFFILIATES
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// CordonManager is an autogenerated mock type for the CordonManager type
type CordonManager struct {
	mock.Mock
}

// Cordon provides a mock function with given fields: ctx, node
func (_m *CordonManager) Cordon(ctx context.Context, node *v1.Node) error {
	ret := _m.Called(ctx, node)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Node) error); ok {
		r0 = rf(ctx, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Uncordon provides a mock function with given fields: ctx, node
func (_m *CordonManager) Uncordon(ctx context.Context, node *v1.Node) error {
	ret := _m.Called(ctx, node)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Node) error); ok {
		r0 = rf(ctx, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCordonManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewCordonManager creates a new instance of CordonManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCordonManager(t mockConstructorTestingTNewCordonManager) *CordonManager {
	mock := &CordonManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
